diff --git a/CMakeLists.txt b/CMakeLists.txt
index 25d437f46f20..400633df95e5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -39,6 +39,11 @@ if (NOT XPTI_PROXY_SRC)
   set(XPTI_PROXY_SRC ${CMAKE_CURRENT_SOURCE_DIR}/../xpti/src/xpti_proxy.cpp)
 endif()
 
+find_package(LLVM REQUIRED CONFIG)
+include(AddLLVM)
+
+find_package(Clang REQUIRED CONFIG)
+
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")
 include(AddSYCLExecutable)
 include(AddSYCL)
@@ -142,13 +147,14 @@ endif()
 set(CLANG_VERSION "${CLANG_VERSION_MAJOR}.${CLANG_VERSION_MINOR}.${CLANG_VERSION_PATCHLEVEL}")
 
 set(SYCL_INCLUDE_DIR "include")
-set(SYCL_INCLUDE_BUILD_DIR ${LLVM_BINARY_DIR}/${SYCL_INCLUDE_DIR})
+set(SYCL_INCLUDE_BUILD_DIR ${CMAKE_BINARY_DIR}/${SYCL_INCLUDE_DIR})
+include_directories(${SYCL_INCLUDE_BUILD_DIR})
 
-add_llvm_external_project(opencl)
-list(FIND LLVM_ENABLE_PROJECTS opencl OPENCL_PROJ_FOUND)
-if(OPENCL_PROJ_FOUND EQUAL -1)
-  message(FATAL_ERROR "opencl external project required but not found.")
-endif()
+# TODO: I'm unsure whether this will just link to regular OpenCL since both are present
+find_package(OpenCL REQUIRED)
+message(OpenCL_INCLUDE_DIR)
+# Ensure we actually have opencl-aot and not just regular OpenCL
+find_program(OPENCL_AOT_EXECUTABLE NAMES opencl-aot REQUIRED)
 
 if(NOT OpenCL_FOUND)
   # Copy OpenCL Headers into sycl headers build directory
@@ -372,7 +378,6 @@ add_custom_target(sycl-compiler
           llvm-objcopy
           spirv-to-ir-wrapper
           sycl-post-link
-          opencl-aot
 )
 
 add_custom_target( sycl-runtime-libraries
@@ -504,43 +509,45 @@ if("libclc" IN_LIST LLVM_ENABLE_PROJECTS)
 endif()
 
 if("cuda" IN_LIST SYCL_ENABLE_BACKENDS)
-  # Ensure that libclc is enabled.
-  list(FIND LLVM_ENABLE_PROJECTS libclc LIBCLC_FOUND)
-  if( LIBCLC_FOUND EQUAL -1 )
-    message(FATAL_ERROR
-      "CUDA support requires adding \"libclc\" to the CMake argument \"LLVM_ENABLE_PROJECTS\"")
-  endif()
+  set(_require_libclc)
 
   add_dependencies(sycl-toolchain ur_adapter_cuda)
   list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS ur_adapter_cuda)
 endif()
 
 if("hip" IN_LIST SYCL_ENABLE_BACKENDS)
-  # Ensure that libclc is enabled.
-  list(FIND LLVM_ENABLE_PROJECTS libclc LIBCLC_FOUND)
-  if( LIBCLC_FOUND EQUAL -1 )
-    message(FATAL_ERROR
-      "HIP support requires adding \"libclc\" to the CMake argument \"LLVM_ENABLE_PROJECTS\"")
-  endif()
+  set(_require_libclc)
 
-  if(NOT TARGET lld AND "${SYCL_BUILD_PI_HIP_PLATFORM}" STREQUAL "AMD")
-    message(FATAL_ERROR
-      "HIP support requires adding \"lld\" to the CMake argument \"LLVM_ENABLE_PROJECTS\"")
-  endif()
+  find_package(LLD REQUIRED)
 
   add_dependencies(sycl-toolchain ur_adapter_hip)
   list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS ur_adapter_hip)
 endif()
 
 if("offload" IN_LIST SYCL_ENABLE_BACKENDS)
-  if(NOT TARGET lld)
-    message(FATAL_ERROR
-      "Offload support requires adding \"lld\" to the CMake argument \"LLVM_ENABLE_PROJECTS\"")
-  endif()
+  find_package(LLD REQUIRED)
+
   add_dependencies(sycl-toolchain ur_adapter_offload)
   list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS ur_adapter_offload)
 endif()
 
+if(NOT DEFINED prepare_builtins_exe AND DEFINED _require_libclc)
+  if(SYCL_PREPARE_BUILTINS_EXE)
+    set(prepare_builtins_exe "${SYCL_PREPARE_BUILTINS_EXE}")
+    set(prepare_builtins_target "")
+  else()
+    find_program(PREPARE_BUILTINS_EXE NAMES prepare-builtins)
+    if(PREPARE_BUILTINS_EXE)
+      set(prepare_builtins_exe "${PREPARE_BUILTINS_EXE}")
+      set(prepare_builtins_target "")
+    else()
+      message(FATAL_ERROR
+        "prepare-builtins is required but not found. "
+        "Install libclc with prepare-builtins, or set -DSYCL_PREPARE_BUILTINS_EXE=<path>")
+    endif()
+  endif()
+endif()
+
 # Use it as fake dependency in order to force another command(s) to execute.
 add_custom_command(OUTPUT __force_it
   COMMAND "${CMAKE_COMMAND}" -E echo
