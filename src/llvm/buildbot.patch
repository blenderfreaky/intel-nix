diff --git a/buildbot/configure.py b/buildbot/configure.py
index 6b4ad1a79706..c7ca02ec7258 100644
--- a/buildbot/configure.py
+++ b/buildbot/configure.py
@@ -137,9 +137,10 @@ def do_configure(args, passthrough_args):
     # CI Default conditionally appends to options, keep it at the bottom of
     # args handling
     if args.ci_defaults:
-        print("#############################################")
-        print("# Default CI configuration will be applied. #")
-        print("#############################################")
+        if not args.print_cmake_flags:
+            print("#############################################")
+            print("# Default CI configuration will be applied. #")
+            print("#############################################")
 
         # For clang-format, clang-tidy and code coverage
         llvm_enable_projects += ";clang-tools-extra;compiler-rt"
@@ -255,20 +256,24 @@ def do_configure(args, passthrough_args):
         )
 
     cmake_cmd += passthrough_args
-    print("[Cmake Command]: {}".format(" ".join(map(shlex.quote, cmake_cmd))))
-
-    try:
-        subprocess.check_call(cmake_cmd, cwd=abs_obj_dir)
-    except subprocess.CalledProcessError:
-        cmake_cache = os.path.join(abs_obj_dir, "CMakeCache.txt")
-        if os.path.isfile(cmake_cache):
-            print(
-                "There is CMakeCache.txt at "
-                + cmake_cache
-                + " ... you can try to remove it and rerun."
-            )
-            print("Configure failed!")
-        return False
+
+    if args.print_cmake_flags:
+        print(" ".join(map(shlex.quote, cmake_cmd[1:])))
+    else:
+        print("[Cmake Command]: {}".format(" ".join(map(shlex.quote, cmake_cmd))))
+
+        try:
+            subprocess.check_call(cmake_cmd, cwd=abs_obj_dir)
+        except subprocess.CalledProcessError:
+            cmake_cache = os.path.join(abs_obj_dir, "CMakeCache.txt")
+            if os.path.isfile(cmake_cache):
+                print(
+                    "There is CMakeCache.txt at "
+                    + cmake_cache
+                    + " ... you can try to remove it and rerun."
+                )
+                print("Configure failed!")
+            return False
 
     return True
 
@@ -411,9 +416,13 @@ def main():
     parser.add_argument(
         "--use-zstd", action="store_true", help="Force zstd linkage while building."
     )
+    parser.add_argument(
+        "--print-cmake-flags", action="store_true", help="Print the generated CMake flags to a single line on standard output and exit. Suppresses all other output and does not run the cmake command."
+    )
     args, passthrough_args = parser.parse_known_intermixed_args()
 
-    print("args:{}".format(args))
+    if not args.print_cmake_flags:
+        print("args:{}".format(args))
 
     return do_configure(args, passthrough_args)
 
